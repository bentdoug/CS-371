total = costs[s1[0]]
    for i in range(1, len(s1)):
        S[i] = total + costs[s1[i]]
        total = S[i]
    total = 0
    for i in range(1, len(s1)):
        S[0, i] = total + costs[s2[i]]
        total = S[0, i]
    '''moves = []
    for i in range(M+1):
        moves.append([])
        for j in range(N+1):
            moves[i].append([])
    # Fill in the base cases
    for j in range(N+1):
        moves[0][j] = 1 # Move left if we're at the top row
    for i in range(M+1):
        moves[i][0] = 2 # Move up if we're at the left column
    
    # Do the dynamic programming to fill in the table and moves
    for i in range(1, M):
        for j in range(1, N):
            add = costs[s1[j]+s2[i]]
            ##print(s1[j]+s2[i], add)
            cost1 = S[i, j-1] + add # Delete the last character from s2
            cost2 = S[i-1, j] + add # Delete the last character from s1
            cost3 = S[i-1, j-1] # Match or swap both characters at the end
            if s1[i-1] != s2[j-1]:
                cost3 += 1
            S[i][j] = min(cost1, cost2, cost3)
            moves[i][j] = np.argmax(np.array([cost1, cost2, cost3]))+1
    cost = int(S[-1, -1])
            
    i = M
    j = N
    path = []
    while not (i == 0 and j == 0):
        if moves[i][j] == 1:
            path.append("Adding {} to s1".format(s2[j-1]))
            j -= 1
        elif moves[i][j] == -1 or -2:
            path.append("Deleting {} from s1".format(s1[i-1]))
            i -= 1
        else:
            if s1[i-1] != s2[j-1]:
                path.append("Swapping in {} for {} in s1".format(s2[j-1], s1[i-1]))
            else:
                path.append("Matching {}".format(s2[j-1]))
            i -= 1
            j -= 1
    path.reverse()'''
    '''for step in path:
        print(step)
    print(cost)'''



















#Dictionary: Key = Node -> Value = That Nodes Root
    roots = {}
        
    #Dictionary: Key = Needleman Score -> Value = Pair of Animals w/that score
    pairs = {}
    needlemanScores = []
    for animals in table:
        pairs[table[animals]] = animals
        needlemanScores.append(table[animals])
    
    needlemanScores.sort(reverse=True)
    edges = []
    for score in needlemanScores:
        pair = pairs[score]
        pair = pair.split('|')
        animal1 = pair[0]
        animal2 = pair[1]
        animal1num = animallist.index(animal1)
        animal2num = animallist.index(animal2)
        edges.append((animal1num, animal2num))
    
    djset = UFFast(len(leafNodes))
    tree_edges = []
    for score in needlemanScores:
        # Check in union find data structure djset to see
        # if they are part of the same component, and hence
        # would create a cycle.
        pair = pairs[score]
        pair = pair.split('|')
        animal1 = pair[0]
        animal2 = pair[1]
        i = animallist.index(animal1)
        j = animallist.index(animal2)
        
        makes_cycle = False
        if djset.find(i,j):
            makes_cycle = True
        
        if not makes_cycle:
            ## TODO: Merge the two nodes in union find, and
            ## add the edge to the spanning tree
            djset.union(i,j)
            tree_edges.append((i, j))
            node = TreeNode(score)
            node.left = djset.root(i)
            node.right = djset.root(j)
            
            
        
    
    print(tree_edges)
    T = PhyloTree()
    T.root = node
    plt.figure(figsize=(10, 14)) # This makes the figure tall enough to show all animals
    T.draw()